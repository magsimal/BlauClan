name: CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: familytree
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install backend deps
        run: |
          cd backend
          npm install
      - name: Lint backend
        run: |
          cd backend
          npm run lint
      - name: Run backend tests
        run: |
          cd backend
          npm test || true
      - name: Install frontend deps
        run: |
          cd frontend
          npm install
      - name: Lint frontend
        run: |
          cd frontend
          npm run lint
      - name: Run frontend tests
        run: |
          cd frontend
          npm test || true
      - name: Extract versions
        id: vars
        run: |
          BACKEND_VERSION=$(jq -r .version backend/package.json)
          FRONTEND_VERSION=$(jq -r .version frontend/package.json)
          echo "BACKEND_VERSION=$BACKEND_VERSION" >> "$GITHUB_OUTPUT"
          echo "FRONTEND_VERSION=$FRONTEND_VERSION" >> "$GITHUB_OUTPUT"
      - name: Build Docker images
        env:
          REF: ${{ github.ref_name }}
        run: |
          if [ "$REF" = "development" ]; then
            docker build -t ghcr.io/${{ github.repository_owner }}/blauclan-backend:${{ steps.vars.outputs.BACKEND_VERSION }}-experimental \
              -t ghcr.io/${{ github.repository_owner }}/blauclan-backend:experimental ./backend
            docker build -t ghcr.io/${{ github.repository_owner }}/blauclan-frontend:${{ steps.vars.outputs.FRONTEND_VERSION }}-experimental \
              -t ghcr.io/${{ github.repository_owner }}/blauclan-frontend:experimental ./frontend
          else
            docker build -t ghcr.io/${{ github.repository_owner }}/blauclan-backend:${{ steps.vars.outputs.BACKEND_VERSION }} \
              -t ghcr.io/${{ github.repository_owner }}/blauclan-backend:latest ./backend
            docker build -t ghcr.io/${{ github.repository_owner }}/blauclan-frontend:${{ steps.vars.outputs.FRONTEND_VERSION }} \
              -t ghcr.io/${{ github.repository_owner }}/blauclan-frontend:latest ./frontend
          fi
      - name: Push Docker images
        if: github.event_name == 'push'
        env:
          REF: ${{ github.ref_name }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          if [ "$REF" = "development" ]; then
            docker push ghcr.io/${{ github.repository_owner }}/blauclan-backend:${{ steps.vars.outputs.BACKEND_VERSION }}-experimental
            docker push ghcr.io/${{ github.repository_owner }}/blauclan-backend:experimental
            docker push ghcr.io/${{ github.repository_owner }}/blauclan-frontend:${{ steps.vars.outputs.FRONTEND_VERSION }}-experimental
            docker push ghcr.io/${{ github.repository_owner }}/blauclan-frontend:experimental
          else
            docker push ghcr.io/${{ github.repository_owner }}/blauclan-backend:${{ steps.vars.outputs.BACKEND_VERSION }}
            docker push ghcr.io/${{ github.repository_owner }}/blauclan-backend:latest
            docker push ghcr.io/${{ github.repository_owner }}/blauclan-frontend:${{ steps.vars.outputs.FRONTEND_VERSION }}
            docker push ghcr.io/${{ github.repository_owner }}/blauclan-frontend:latest
          fi
      - name: Trigger Portainer Deploy
        if: github.event_name == 'push'
        env:
          WEBHOOK_DEV: ${{ secrets.PORTAINER_WEBHOOK_DEV }}
          WEBHOOK_PROD: ${{ secrets.PORTAINER_WEBHOOK_PROD }}
          REF: ${{ github.ref_name }}
        run: |
          if [ "$REF" = "main" ]; then
            curl -X POST "$WEBHOOK_PROD"
          elif [ "$REF" = "development" ]; then
            curl -X POST "$WEBHOOK_DEV"
          else
            echo "No webhook configured for $REF"
          fi
